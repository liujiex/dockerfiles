#! /usr/bin/python2
# -*- coding: utf-8 -*-
# create by liujie<liujie.m@me.com> 2013/03/11 15:49:16


'''
-h --help
-r --remote [ip:port]
-l --local [ip:port]
-t --tcp
-u --udp
-v --verbose
-n --nat
ipforward -h -v --remote 192.168.0.8:1812 --local :1813 --tcp --udp --nat 192.168.0.1:5001

'''

import socket, select, sys, getopt, threading, time
import binascii

def hstr( data ):
    return binascii.b2a_hex( data )
def from_hstr( hstr ):
    return binascii.a2b_hex( hstr )

class forward_channel( threading.Thread ):
    def __init__( self ):
        threading.Thread.__init__(self)
        pass
    
    def setup( self, remote, local, verbose, nat ):
        self.remote_ip, self.remote_port = self.ip_port( remote )
        self.local_ip, self.local_port = self.ip_port( local )
        self.verbose = verbose
        self.nat_ip, self.nat_port = self.ip_port( nat )
        return

    def run( self ):
        return

    def stop( self ):
        self.thread_stop = True;
    
    def ip_port( self, address ):
        pos = address.find( ':' )
        ip = address[ : pos ]
        port = int(address[ pos + 1 : ])
        return ip, port
    
    
class tcp_channel( forward_channel ):
    
    def __init__( self ):
        forward_channel.__init__(self)
        pass
    
    def run( self ):
        addr_local = ( self.local_ip, self.local_port )
        addr_forward = ( self.remote_ip, self.remote_port )
        sock_bind = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
        sock_bind.setsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 )

        try:
            sock_bind.bind( addr_local )
        except socket.error, msg:
            print 'Bind failed. error code:' + str(msg[0]) + ' message ' + msg[1]
            sys.exit()

        print 'Socket bind ', addr_local, ' success'
        sock_bind.listen(5)
        print 'Socket listening...'
        
        while True:
            sock_cli, addr_cli = sock_bind.accept()
            print 'Connected from: ', addr_cli
    
            sock_forward = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
            try:
                sock_forward.connect( addr_forward )
            except socket.error, msg:
                print 'Connect failed. error code:' + str(msg[0]) + ' message ' + msg[1]
                return
            print 'Forward connect ok.', addr_forward

            link_ok = True
            while link_ok:
                rlist, wlist, elist = select.select( [sock_cli, sock_forward], [], [], 5 )

                if [rlist, wlist, elist] != [ [], [], [] ]:
                    for sock_ready in rlist:
                        if sock_ready == sock_cli:
                            data = sock_cli.recv( 8192 )
                            if not data:
                                if self.verbose:
                                    print addr_cli, 'recv error. disconnect.'
                                link_ok = False
                                break
                            else:
                                sock_forward.send( data )
                                if self.verbose:
                                    print addr_cli,'->',addr_local,'->',addr_forward,':[',hstr(data),']'
                        else:
                            data = sock_forward.recv( 8192 )
                            if not data:
                                if self.verbose:
                                    print addr_forward, 'recv error. disconnect.'
                                link_ok = False
                                break
                            else:
                                sock_cli.send( data )
                                if self.verbose:
                                    print addr_forward,'->',addr_local,'->',addr_cli,':[',hstr(data),']'
                if not link_ok:
                    break;
                                
            sock_cli.close()
            sock_forward.close()

        sock_bind.close()

        return

class udp_channel( forward_channel ):
    
    def __init__( self ):
        forward_channel.__init__(self)
        pass
    
    def run( self ):
        addr_local = ( self.local_ip, self.local_port )
        addr_forward = ( self.remote_ip, self.remote_port )
        addr_nat = ( self.nat_ip, self.nat_port )
        sock_bind = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        sock_nat = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )

        try:
            sock_bind.bind( addr_local )
        except socket.error, msg:
            print 'Bind sock_bind failed. error code:' + str(msg[0]) + ' message ' + msg[1]
            sys.exit()
        print 'Socket bind ', addr_local, ' success'
        try:
            sock_nat.bind( addr_nat )
        except socket.error, msg:
            print 'Bind sock_nat failed. error code:' + str(msg[0]) + ' message ' + msg[1]
            sys.exit()
        print 'Socket bind ', addr_nat, ' success'

        addr_cli = ( '', 0 )
        
        while True:
            rlist, wlist, elist = select.select( [sock_bind, sock_nat], [], [], 5 )

            if [rlist, wlist, elist] != [ [], [], [] ]:
                for sock_ready in rlist:
                    if sock_ready == sock_bind:
                        data, addr_cli = sock_bind.recvfrom( 8192 )
                        if not data:
                            if self.verbose:
                                print addr_cli, 'recvfrom error.'
                            break
                        else:
                            sock_nat.sendto( data, addr_forward )
                            if self.verbose:
                                print addr_cli,'->',addr_local,addr_nat,'->',addr_forward,':[',hstr(data),']'
                    else:
                        data, addr = sock_nat.recvfrom( 8192 )
                        if not data:
                            if self.verbose:
                                print addr_nat, 'recvfrom error.'
                            break
                        else:
                            sock_bind.sendto( data, addr_cli )
                            if self.verbose:
                                print addr,'->',addr_nat,addr_local,'->',addr_cli,':[',hstr(data),']'
                                
        sock_bind.close()
        sock_nat.close()

        return

    
def usage( ret = 0 ):
    print(__doc__)
    sys.exit( ret )


def main( argv ):
    channels = []
    verbose = False
    nat = ':0'
    remote = ''
    local = ''
    
    try:
        opts,args = getopt.gnu_getopt( argv, 'hr:l:tuvn:', ['help','remote=','local=','tcp','udp','verbose','nat='] )
    except getopt.GetoptError as err:
        print(err)
        usage( -2 )
    for a,o in opts:
        if a in ('-h', '--help'):
            usage()
        elif a in ('-r', '--remote'):
            remote = o
        elif a in ('-l', '--local'):
            local = o
        elif a in ('-t', '--tcp'):
            channels.append( tcp_channel() );
        elif a in ('-u', '--udp'):
            channels.append( udp_channel() );
        elif a in ('-v', '--verbose'):
            verbose = True
        elif a in ('-n', '--nat'):
            nat = o

    if remote == '' or local == '':
        usage( -1 )

    if len(channels) < 1:
        channels.append( tcp_channel() );

    for channel in channels:
        channel.setup( remote, local, verbose, nat )
        channel.start();

    while True:
        try:
            time.sleep(10)
        except KeyboardInterrupt:
            sys.exit( 0 )


if __name__ == '__main__':
    main( sys.argv[1:] )
    

